// Code generated by protoc-gen-go-grpcmock. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpcmock v1.3.0
// - protoc                 v4.25.1
// - pegomock               v2.9.0+incompatible
// source: route_guide.proto

package routeguide

import (
	context "context"
	pegomock "github.com/petergtz/pegomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	"reflect"
	"time"
)

type MockRouteGuideClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockRouteGuideClient(options ...pegomock.Option) *MockRouteGuideClient {
	mock := &MockRouteGuideClient{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockRouteGuideClient) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockRouteGuideClient) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockRouteGuideClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuideClient().")
	}
	params := []pegomock.Param{ctx, in}
	for _, param := range opts {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetFeature", params, []reflect.Type{reflect.TypeOf((**Feature)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *Feature
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*Feature)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuideClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (RouteGuide_ListFeaturesClient, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuideClient().")
	}
	params := []pegomock.Param{ctx, in}
	for _, param := range opts {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListFeatures", params, []reflect.Type{reflect.TypeOf((*RouteGuide_ListFeaturesClient)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 RouteGuide_ListFeaturesClient
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(RouteGuide_ListFeaturesClient)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuideClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_RecordRouteClient, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuideClient().")
	}
	params := []pegomock.Param{ctx}
	for _, param := range opts {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RecordRoute", params, []reflect.Type{reflect.TypeOf((*RouteGuide_RecordRouteClient)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 RouteGuide_RecordRouteClient
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(RouteGuide_RecordRouteClient)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuideClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_RouteChatClient, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuideClient().")
	}
	params := []pegomock.Param{ctx}
	for _, param := range opts {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RouteChat", params, []reflect.Type{reflect.TypeOf((*RouteGuide_RouteChatClient)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 RouteGuide_RouteChatClient
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(RouteGuide_RouteChatClient)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuideClient) VerifyWasCalledOnce() *VerifierMockRouteGuideClient {
	return &VerifierMockRouteGuideClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockRouteGuideClient) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockRouteGuideClient {
	return &VerifierMockRouteGuideClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockRouteGuideClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockRouteGuideClient {
	return &VerifierMockRouteGuideClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockRouteGuideClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockRouteGuideClient {
	return &VerifierMockRouteGuideClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockRouteGuideClient struct {
	mock                   *MockRouteGuideClient
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockRouteGuideClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) *MockRouteGuideClient_GetFeature_OngoingVerification {
	params := []pegomock.Param{ctx, in}
	for _, param := range opts {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetFeature", params, verifier.timeout)
	return &MockRouteGuideClient_GetFeature_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuideClient_GetFeature_OngoingVerification struct {
	mock              *MockRouteGuideClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuideClient_GetFeature_OngoingVerification) GetCapturedArguments() (context.Context, *Point, []grpc.CallOption) {
	ctx, in, opts := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], in[len(in)-1], opts[len(opts)-1]
}

func (c *MockRouteGuideClient_GetFeature_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*Point, _param2 [][]grpc.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*Point, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(*Point)
		}
		_param2 = make([][]grpc.CallOption, len(c.methodInvocations))
		for u := 0; u < len(c.methodInvocations); u++ {
			_param2[u] = make([]grpc.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(grpc.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierMockRouteGuideClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) *MockRouteGuideClient_ListFeatures_OngoingVerification {
	params := []pegomock.Param{ctx, in}
	for _, param := range opts {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListFeatures", params, verifier.timeout)
	return &MockRouteGuideClient_ListFeatures_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuideClient_ListFeatures_OngoingVerification struct {
	mock              *MockRouteGuideClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuideClient_ListFeatures_OngoingVerification) GetCapturedArguments() (context.Context, *Rectangle, []grpc.CallOption) {
	ctx, in, opts := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], in[len(in)-1], opts[len(opts)-1]
}

func (c *MockRouteGuideClient_ListFeatures_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*Rectangle, _param2 [][]grpc.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*Rectangle, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(*Rectangle)
		}
		_param2 = make([][]grpc.CallOption, len(c.methodInvocations))
		for u := 0; u < len(c.methodInvocations); u++ {
			_param2[u] = make([]grpc.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(grpc.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierMockRouteGuideClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) *MockRouteGuideClient_RecordRoute_OngoingVerification {
	params := []pegomock.Param{ctx}
	for _, param := range opts {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RecordRoute", params, verifier.timeout)
	return &MockRouteGuideClient_RecordRoute_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuideClient_RecordRoute_OngoingVerification struct {
	mock              *MockRouteGuideClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuideClient_RecordRoute_OngoingVerification) GetCapturedArguments() (context.Context, []grpc.CallOption) {
	ctx, opts := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], opts[len(opts)-1]
}

func (c *MockRouteGuideClient_RecordRoute_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 [][]grpc.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([][]grpc.CallOption, len(c.methodInvocations))
		for u := 0; u < len(c.methodInvocations); u++ {
			_param1[u] = make([]grpc.CallOption, len(params)-1)
			for x := 1; x < len(params); x++ {
				if params[x][u] != nil {
					_param1[u][x-1] = params[x][u].(grpc.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierMockRouteGuideClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) *MockRouteGuideClient_RouteChat_OngoingVerification {
	params := []pegomock.Param{ctx}
	for _, param := range opts {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RouteChat", params, verifier.timeout)
	return &MockRouteGuideClient_RouteChat_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuideClient_RouteChat_OngoingVerification struct {
	mock              *MockRouteGuideClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuideClient_RouteChat_OngoingVerification) GetCapturedArguments() (context.Context, []grpc.CallOption) {
	ctx, opts := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], opts[len(opts)-1]
}

func (c *MockRouteGuideClient_RouteChat_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 [][]grpc.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([][]grpc.CallOption, len(c.methodInvocations))
		for u := 0; u < len(c.methodInvocations); u++ {
			_param1[u] = make([]grpc.CallOption, len(params)-1)
			for x := 1; x < len(params); x++ {
				if params[x][u] != nil {
					_param1[u][x-1] = params[x][u].(grpc.CallOption)
				}
			}
		}
	}
	return
}

type MockRouteGuideServer struct {
	fail func(message string, callerSkip ...int)
}

func NewMockRouteGuideServer(options ...pegomock.Option) *MockRouteGuideServer {
	mock := &MockRouteGuideServer{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockRouteGuideServer) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockRouteGuideServer) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockRouteGuideServer) GetFeature(ctx context.Context, in *Point) (*Feature, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuideServer().")
	}
	params := []pegomock.Param{ctx, in}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetFeature", params, []reflect.Type{reflect.TypeOf((**Feature)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *Feature
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*Feature)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuideServer) ListFeatures(in *Rectangle, out RouteGuide_ListFeaturesServer) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuideServer().")
	}
	params := []pegomock.Param{in, out}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ListFeatures", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuideServer) RecordRoute(out RouteGuide_RecordRouteServer) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuideServer().")
	}
	params := []pegomock.Param{out}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RecordRoute", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuideServer) RouteChat(out RouteGuide_RouteChatServer) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuideServer().")
	}
	params := []pegomock.Param{out}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RouteChat", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuideServer) VerifyWasCalledOnce() *VerifierMockRouteGuideServer {
	return &VerifierMockRouteGuideServer{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockRouteGuideServer) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockRouteGuideServer {
	return &VerifierMockRouteGuideServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockRouteGuideServer) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockRouteGuideServer {
	return &VerifierMockRouteGuideServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockRouteGuideServer) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockRouteGuideServer {
	return &VerifierMockRouteGuideServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockRouteGuideServer struct {
	mock                   *MockRouteGuideServer
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockRouteGuideServer) GetFeature(ctx context.Context, in *Point) *MockRouteGuideServer_GetFeature_OngoingVerification {
	params := []pegomock.Param{ctx, in}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetFeature", params, verifier.timeout)
	return &MockRouteGuideServer_GetFeature_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuideServer_GetFeature_OngoingVerification struct {
	mock              *MockRouteGuideServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuideServer_GetFeature_OngoingVerification) GetCapturedArguments() (context.Context, *Point) {
	ctx, in := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], in[len(in)-1]
}

func (c *MockRouteGuideServer_GetFeature_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*Point) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*Point, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(*Point)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuideServer) ListFeatures(in *Rectangle, out RouteGuide_ListFeaturesServer) *MockRouteGuideServer_ListFeatures_OngoingVerification {
	params := []pegomock.Param{in, out}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ListFeatures", params, verifier.timeout)
	return &MockRouteGuideServer_ListFeatures_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuideServer_ListFeatures_OngoingVerification struct {
	mock              *MockRouteGuideServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuideServer_ListFeatures_OngoingVerification) GetCapturedArguments() (*Rectangle, RouteGuide_ListFeaturesServer) {
	in, out := c.GetAllCapturedArguments()
	return in[len(in)-1], out[len(out)-1]
}

func (c *MockRouteGuideServer_ListFeatures_OngoingVerification) GetAllCapturedArguments() (_param0 []*Rectangle, _param1 []RouteGuide_ListFeaturesServer) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*Rectangle, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*Rectangle)
		}
		_param1 = make([]RouteGuide_ListFeaturesServer, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(RouteGuide_ListFeaturesServer)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuideServer) RecordRoute(out RouteGuide_RecordRouteServer) *MockRouteGuideServer_RecordRoute_OngoingVerification {
	params := []pegomock.Param{out}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RecordRoute", params, verifier.timeout)
	return &MockRouteGuideServer_RecordRoute_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuideServer_RecordRoute_OngoingVerification struct {
	mock              *MockRouteGuideServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuideServer_RecordRoute_OngoingVerification) GetCapturedArguments() RouteGuide_RecordRouteServer {
	out := c.GetAllCapturedArguments()
	return out[len(out)-1]
}

func (c *MockRouteGuideServer_RecordRoute_OngoingVerification) GetAllCapturedArguments() (_param0 []RouteGuide_RecordRouteServer) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]RouteGuide_RecordRouteServer, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(RouteGuide_RecordRouteServer)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuideServer) RouteChat(out RouteGuide_RouteChatServer) *MockRouteGuideServer_RouteChat_OngoingVerification {
	params := []pegomock.Param{out}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RouteChat", params, verifier.timeout)
	return &MockRouteGuideServer_RouteChat_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuideServer_RouteChat_OngoingVerification struct {
	mock              *MockRouteGuideServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuideServer_RouteChat_OngoingVerification) GetCapturedArguments() RouteGuide_RouteChatServer {
	out := c.GetAllCapturedArguments()
	return out[len(out)-1]
}

func (c *MockRouteGuideServer_RouteChat_OngoingVerification) GetAllCapturedArguments() (_param0 []RouteGuide_RouteChatServer) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]RouteGuide_RouteChatServer, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(RouteGuide_RouteChatServer)
		}
	}
	return
}

type MockRouteGuide_ListFeaturesClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockRouteGuide_ListFeaturesClient(options ...pegomock.Option) *MockRouteGuide_ListFeaturesClient {
	mock := &MockRouteGuide_ListFeaturesClient{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockRouteGuide_ListFeaturesClient) SetFailHandler(fh pegomock.FailHandler) {
	mock.fail = fh
}
func (mock *MockRouteGuide_ListFeaturesClient) FailHandler() pegomock.FailHandler { return mock.fail }

func (mock *MockRouteGuide_ListFeaturesClient) Header() (metadata.MD, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Header", params, []reflect.Type{reflect.TypeOf((*metadata.MD)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 metadata.MD
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(metadata.MD)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuide_ListFeaturesClient) Trailer() metadata.MD {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Trailer", params, []reflect.Type{reflect.TypeOf((*metadata.MD)(nil)).Elem()})
	var ret0 metadata.MD
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(metadata.MD)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesClient) CloseSend() error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CloseSend", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesClient) Context() context.Context {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Context", params, []reflect.Type{reflect.TypeOf((*context.Context)(nil)).Elem()})
	var ret0 context.Context
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(context.Context)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesClient) SendMsg(msg interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesClient().")
	}
	params := []pegomock.Param{msg}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SendMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesClient) RecvMsg(msg interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesClient().")
	}
	params := []pegomock.Param{msg}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RecvMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesClient) Recv() (*Feature, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Recv", params, []reflect.Type{reflect.TypeOf((**Feature)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *Feature
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*Feature)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuide_ListFeaturesClient) VerifyWasCalledOnce() *VerifierMockRouteGuide_ListFeaturesClient {
	return &VerifierMockRouteGuide_ListFeaturesClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockRouteGuide_ListFeaturesClient) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockRouteGuide_ListFeaturesClient {
	return &VerifierMockRouteGuide_ListFeaturesClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockRouteGuide_ListFeaturesClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockRouteGuide_ListFeaturesClient {
	return &VerifierMockRouteGuide_ListFeaturesClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockRouteGuide_ListFeaturesClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockRouteGuide_ListFeaturesClient {
	return &VerifierMockRouteGuide_ListFeaturesClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockRouteGuide_ListFeaturesClient struct {
	mock                   *MockRouteGuide_ListFeaturesClient
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockRouteGuide_ListFeaturesClient) Header() *MockRouteGuide_ListFeaturesClient_Header_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Header", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesClient_Header_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesClient_Header_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesClient_Header_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_ListFeaturesClient_Header_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_ListFeaturesClient) Trailer() *MockRouteGuide_ListFeaturesClient_Trailer_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Trailer", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesClient_Trailer_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesClient_Trailer_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesClient_Trailer_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_ListFeaturesClient_Trailer_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_ListFeaturesClient) CloseSend() *MockRouteGuide_ListFeaturesClient_CloseSend_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CloseSend", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesClient_CloseSend_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesClient_CloseSend_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesClient_CloseSend_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_ListFeaturesClient_CloseSend_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_ListFeaturesClient) Context() *MockRouteGuide_ListFeaturesClient_Context_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Context", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesClient_Context_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesClient_Context_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesClient_Context_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_ListFeaturesClient_Context_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_ListFeaturesClient) SendMsg(msg interface{}) *MockRouteGuide_ListFeaturesClient_SendMsg_OngoingVerification {
	params := []pegomock.Param{msg}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendMsg", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesClient_SendMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesClient_SendMsg_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesClient_SendMsg_OngoingVerification) GetCapturedArguments() interface{} {
	msg := c.GetAllCapturedArguments()
	return msg[len(msg)-1]
}

func (c *MockRouteGuide_ListFeaturesClient_SendMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_ListFeaturesClient) RecvMsg(msg interface{}) *MockRouteGuide_ListFeaturesClient_RecvMsg_OngoingVerification {
	params := []pegomock.Param{msg}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RecvMsg", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesClient_RecvMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesClient_RecvMsg_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesClient_RecvMsg_OngoingVerification) GetCapturedArguments() interface{} {
	msg := c.GetAllCapturedArguments()
	return msg[len(msg)-1]
}

func (c *MockRouteGuide_ListFeaturesClient_RecvMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_ListFeaturesClient) Recv() *MockRouteGuide_ListFeaturesClient_Recv_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Recv", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesClient_Recv_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesClient_Recv_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesClient_Recv_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_ListFeaturesClient_Recv_OngoingVerification) GetAllCapturedArguments() {
}

type MockRouteGuide_ListFeaturesServer struct {
	fail func(message string, callerSkip ...int)
}

func NewMockRouteGuide_ListFeaturesServer(options ...pegomock.Option) *MockRouteGuide_ListFeaturesServer {
	mock := &MockRouteGuide_ListFeaturesServer{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockRouteGuide_ListFeaturesServer) SetFailHandler(fh pegomock.FailHandler) {
	mock.fail = fh
}
func (mock *MockRouteGuide_ListFeaturesServer) FailHandler() pegomock.FailHandler { return mock.fail }

func (mock *MockRouteGuide_ListFeaturesServer) SetHeader(md metadata.MD) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesServer().")
	}
	params := []pegomock.Param{md}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SetHeader", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesServer) SendHeader(md metadata.MD) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesServer().")
	}
	params := []pegomock.Param{md}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SendHeader", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesServer) SetTrailer(md metadata.MD) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesServer().")
	}
	params := []pegomock.Param{md}
	pegomock.GetGenericMockFrom(mock).Invoke("SetTrailer", params, []reflect.Type{})
}

func (mock *MockRouteGuide_ListFeaturesServer) Context() context.Context {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesServer().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Context", params, []reflect.Type{reflect.TypeOf((*context.Context)(nil)).Elem()})
	var ret0 context.Context
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(context.Context)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesServer) SendMsg(m interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesServer().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SendMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesServer) RecvMsg(m interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesServer().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RecvMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesServer) Send(m *Feature) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_ListFeaturesServer().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Send", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_ListFeaturesServer) VerifyWasCalledOnce() *VerifierMockRouteGuide_ListFeaturesServer {
	return &VerifierMockRouteGuide_ListFeaturesServer{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockRouteGuide_ListFeaturesServer) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockRouteGuide_ListFeaturesServer {
	return &VerifierMockRouteGuide_ListFeaturesServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockRouteGuide_ListFeaturesServer) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockRouteGuide_ListFeaturesServer {
	return &VerifierMockRouteGuide_ListFeaturesServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockRouteGuide_ListFeaturesServer) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockRouteGuide_ListFeaturesServer {
	return &VerifierMockRouteGuide_ListFeaturesServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockRouteGuide_ListFeaturesServer struct {
	mock                   *MockRouteGuide_ListFeaturesServer
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockRouteGuide_ListFeaturesServer) SetHeader(md metadata.MD) *MockRouteGuide_ListFeaturesServer_SetHeader_OngoingVerification {
	params := []pegomock.Param{md}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetHeader", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesServer_SetHeader_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesServer_SetHeader_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesServer_SetHeader_OngoingVerification) GetCapturedArguments() metadata.MD {
	md := c.GetAllCapturedArguments()
	return md[len(md)-1]
}

func (c *MockRouteGuide_ListFeaturesServer_SetHeader_OngoingVerification) GetAllCapturedArguments() (_param0 []metadata.MD) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]metadata.MD, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(metadata.MD)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_ListFeaturesServer) SendHeader(md metadata.MD) *MockRouteGuide_ListFeaturesServer_SendHeader_OngoingVerification {
	params := []pegomock.Param{md}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendHeader", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesServer_SendHeader_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesServer_SendHeader_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesServer_SendHeader_OngoingVerification) GetCapturedArguments() metadata.MD {
	md := c.GetAllCapturedArguments()
	return md[len(md)-1]
}

func (c *MockRouteGuide_ListFeaturesServer_SendHeader_OngoingVerification) GetAllCapturedArguments() (_param0 []metadata.MD) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]metadata.MD, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(metadata.MD)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_ListFeaturesServer) SetTrailer(md metadata.MD) *MockRouteGuide_ListFeaturesServer_SetTrailer_OngoingVerification {
	params := []pegomock.Param{md}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetTrailer", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesServer_SetTrailer_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesServer_SetTrailer_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesServer_SetTrailer_OngoingVerification) GetCapturedArguments() metadata.MD {
	md := c.GetAllCapturedArguments()
	return md[len(md)-1]
}

func (c *MockRouteGuide_ListFeaturesServer_SetTrailer_OngoingVerification) GetAllCapturedArguments() (_param0 []metadata.MD) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]metadata.MD, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(metadata.MD)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_ListFeaturesServer) Context() *MockRouteGuide_ListFeaturesServer_Context_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Context", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesServer_Context_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesServer_Context_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesServer_Context_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_ListFeaturesServer_Context_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_ListFeaturesServer) SendMsg(m interface{}) *MockRouteGuide_ListFeaturesServer_SendMsg_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendMsg", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesServer_SendMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesServer_SendMsg_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesServer_SendMsg_OngoingVerification) GetCapturedArguments() interface{} {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_ListFeaturesServer_SendMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_ListFeaturesServer) RecvMsg(m interface{}) *MockRouteGuide_ListFeaturesServer_RecvMsg_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RecvMsg", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesServer_RecvMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesServer_RecvMsg_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesServer_RecvMsg_OngoingVerification) GetCapturedArguments() interface{} {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_ListFeaturesServer_RecvMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_ListFeaturesServer) Send(m *Feature) *MockRouteGuide_ListFeaturesServer_Send_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Send", params, verifier.timeout)
	return &MockRouteGuide_ListFeaturesServer_Send_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_ListFeaturesServer_Send_OngoingVerification struct {
	mock              *MockRouteGuide_ListFeaturesServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_ListFeaturesServer_Send_OngoingVerification) GetCapturedArguments() *Feature {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_ListFeaturesServer_Send_OngoingVerification) GetAllCapturedArguments() (_param0 []*Feature) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*Feature, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*Feature)
		}
	}
	return
}

type MockRouteGuide_RecordRouteClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockRouteGuide_RecordRouteClient(options ...pegomock.Option) *MockRouteGuide_RecordRouteClient {
	mock := &MockRouteGuide_RecordRouteClient{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockRouteGuide_RecordRouteClient) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockRouteGuide_RecordRouteClient) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockRouteGuide_RecordRouteClient) Header() (metadata.MD, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Header", params, []reflect.Type{reflect.TypeOf((*metadata.MD)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 metadata.MD
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(metadata.MD)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuide_RecordRouteClient) Trailer() metadata.MD {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Trailer", params, []reflect.Type{reflect.TypeOf((*metadata.MD)(nil)).Elem()})
	var ret0 metadata.MD
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(metadata.MD)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteClient) CloseSend() error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CloseSend", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteClient) Context() context.Context {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Context", params, []reflect.Type{reflect.TypeOf((*context.Context)(nil)).Elem()})
	var ret0 context.Context
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(context.Context)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteClient) SendMsg(msg interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteClient().")
	}
	params := []pegomock.Param{msg}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SendMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteClient) RecvMsg(msg interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteClient().")
	}
	params := []pegomock.Param{msg}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RecvMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteClient) Send(m *Point) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteClient().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Send", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteClient) CloseAndRecv() (*RouteSummary, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CloseAndRecv", params, []reflect.Type{reflect.TypeOf((**RouteSummary)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *RouteSummary
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*RouteSummary)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuide_RecordRouteClient) VerifyWasCalledOnce() *VerifierMockRouteGuide_RecordRouteClient {
	return &VerifierMockRouteGuide_RecordRouteClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockRouteGuide_RecordRouteClient) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockRouteGuide_RecordRouteClient {
	return &VerifierMockRouteGuide_RecordRouteClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockRouteGuide_RecordRouteClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockRouteGuide_RecordRouteClient {
	return &VerifierMockRouteGuide_RecordRouteClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockRouteGuide_RecordRouteClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockRouteGuide_RecordRouteClient {
	return &VerifierMockRouteGuide_RecordRouteClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockRouteGuide_RecordRouteClient struct {
	mock                   *MockRouteGuide_RecordRouteClient
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockRouteGuide_RecordRouteClient) Header() *MockRouteGuide_RecordRouteClient_Header_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Header", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteClient_Header_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteClient_Header_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteClient_Header_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RecordRouteClient_Header_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RecordRouteClient) Trailer() *MockRouteGuide_RecordRouteClient_Trailer_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Trailer", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteClient_Trailer_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteClient_Trailer_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteClient_Trailer_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RecordRouteClient_Trailer_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RecordRouteClient) CloseSend() *MockRouteGuide_RecordRouteClient_CloseSend_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CloseSend", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteClient_CloseSend_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteClient_CloseSend_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteClient_CloseSend_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RecordRouteClient_CloseSend_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RecordRouteClient) Context() *MockRouteGuide_RecordRouteClient_Context_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Context", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteClient_Context_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteClient_Context_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteClient_Context_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RecordRouteClient_Context_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RecordRouteClient) SendMsg(msg interface{}) *MockRouteGuide_RecordRouteClient_SendMsg_OngoingVerification {
	params := []pegomock.Param{msg}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendMsg", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteClient_SendMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteClient_SendMsg_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteClient_SendMsg_OngoingVerification) GetCapturedArguments() interface{} {
	msg := c.GetAllCapturedArguments()
	return msg[len(msg)-1]
}

func (c *MockRouteGuide_RecordRouteClient_SendMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RecordRouteClient) RecvMsg(msg interface{}) *MockRouteGuide_RecordRouteClient_RecvMsg_OngoingVerification {
	params := []pegomock.Param{msg}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RecvMsg", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteClient_RecvMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteClient_RecvMsg_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteClient_RecvMsg_OngoingVerification) GetCapturedArguments() interface{} {
	msg := c.GetAllCapturedArguments()
	return msg[len(msg)-1]
}

func (c *MockRouteGuide_RecordRouteClient_RecvMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RecordRouteClient) Send(m *Point) *MockRouteGuide_RecordRouteClient_Send_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Send", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteClient_Send_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteClient_Send_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteClient_Send_OngoingVerification) GetCapturedArguments() *Point {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_RecordRouteClient_Send_OngoingVerification) GetAllCapturedArguments() (_param0 []*Point) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*Point, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*Point)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RecordRouteClient) CloseAndRecv() *MockRouteGuide_RecordRouteClient_CloseAndRecv_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CloseAndRecv", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteClient_CloseAndRecv_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteClient_CloseAndRecv_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteClient_CloseAndRecv_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RecordRouteClient_CloseAndRecv_OngoingVerification) GetAllCapturedArguments() {
}

type MockRouteGuide_RecordRouteServer struct {
	fail func(message string, callerSkip ...int)
}

func NewMockRouteGuide_RecordRouteServer(options ...pegomock.Option) *MockRouteGuide_RecordRouteServer {
	mock := &MockRouteGuide_RecordRouteServer{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockRouteGuide_RecordRouteServer) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockRouteGuide_RecordRouteServer) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockRouteGuide_RecordRouteServer) SetHeader(md metadata.MD) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteServer().")
	}
	params := []pegomock.Param{md}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SetHeader", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteServer) SendHeader(md metadata.MD) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteServer().")
	}
	params := []pegomock.Param{md}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SendHeader", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteServer) SetTrailer(md metadata.MD) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteServer().")
	}
	params := []pegomock.Param{md}
	pegomock.GetGenericMockFrom(mock).Invoke("SetTrailer", params, []reflect.Type{})
}

func (mock *MockRouteGuide_RecordRouteServer) Context() context.Context {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteServer().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Context", params, []reflect.Type{reflect.TypeOf((*context.Context)(nil)).Elem()})
	var ret0 context.Context
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(context.Context)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteServer) SendMsg(m interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteServer().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SendMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteServer) RecvMsg(m interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteServer().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RecvMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteServer) Recv() (*Point, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteServer().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Recv", params, []reflect.Type{reflect.TypeOf((**Point)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *Point
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*Point)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuide_RecordRouteServer) SendAndClose(m *RouteSummary) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RecordRouteServer().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SendAndClose", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RecordRouteServer) VerifyWasCalledOnce() *VerifierMockRouteGuide_RecordRouteServer {
	return &VerifierMockRouteGuide_RecordRouteServer{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockRouteGuide_RecordRouteServer) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockRouteGuide_RecordRouteServer {
	return &VerifierMockRouteGuide_RecordRouteServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockRouteGuide_RecordRouteServer) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockRouteGuide_RecordRouteServer {
	return &VerifierMockRouteGuide_RecordRouteServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockRouteGuide_RecordRouteServer) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockRouteGuide_RecordRouteServer {
	return &VerifierMockRouteGuide_RecordRouteServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockRouteGuide_RecordRouteServer struct {
	mock                   *MockRouteGuide_RecordRouteServer
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockRouteGuide_RecordRouteServer) SetHeader(md metadata.MD) *MockRouteGuide_RecordRouteServer_SetHeader_OngoingVerification {
	params := []pegomock.Param{md}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetHeader", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteServer_SetHeader_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteServer_SetHeader_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteServer_SetHeader_OngoingVerification) GetCapturedArguments() metadata.MD {
	md := c.GetAllCapturedArguments()
	return md[len(md)-1]
}

func (c *MockRouteGuide_RecordRouteServer_SetHeader_OngoingVerification) GetAllCapturedArguments() (_param0 []metadata.MD) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]metadata.MD, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(metadata.MD)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RecordRouteServer) SendHeader(md metadata.MD) *MockRouteGuide_RecordRouteServer_SendHeader_OngoingVerification {
	params := []pegomock.Param{md}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendHeader", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteServer_SendHeader_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteServer_SendHeader_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteServer_SendHeader_OngoingVerification) GetCapturedArguments() metadata.MD {
	md := c.GetAllCapturedArguments()
	return md[len(md)-1]
}

func (c *MockRouteGuide_RecordRouteServer_SendHeader_OngoingVerification) GetAllCapturedArguments() (_param0 []metadata.MD) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]metadata.MD, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(metadata.MD)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RecordRouteServer) SetTrailer(md metadata.MD) *MockRouteGuide_RecordRouteServer_SetTrailer_OngoingVerification {
	params := []pegomock.Param{md}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetTrailer", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteServer_SetTrailer_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteServer_SetTrailer_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteServer_SetTrailer_OngoingVerification) GetCapturedArguments() metadata.MD {
	md := c.GetAllCapturedArguments()
	return md[len(md)-1]
}

func (c *MockRouteGuide_RecordRouteServer_SetTrailer_OngoingVerification) GetAllCapturedArguments() (_param0 []metadata.MD) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]metadata.MD, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(metadata.MD)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RecordRouteServer) Context() *MockRouteGuide_RecordRouteServer_Context_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Context", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteServer_Context_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteServer_Context_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteServer_Context_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RecordRouteServer_Context_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RecordRouteServer) SendMsg(m interface{}) *MockRouteGuide_RecordRouteServer_SendMsg_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendMsg", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteServer_SendMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteServer_SendMsg_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteServer_SendMsg_OngoingVerification) GetCapturedArguments() interface{} {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_RecordRouteServer_SendMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RecordRouteServer) RecvMsg(m interface{}) *MockRouteGuide_RecordRouteServer_RecvMsg_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RecvMsg", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteServer_RecvMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteServer_RecvMsg_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteServer_RecvMsg_OngoingVerification) GetCapturedArguments() interface{} {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_RecordRouteServer_RecvMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RecordRouteServer) Recv() *MockRouteGuide_RecordRouteServer_Recv_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Recv", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteServer_Recv_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteServer_Recv_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteServer_Recv_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RecordRouteServer_Recv_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RecordRouteServer) SendAndClose(m *RouteSummary) *MockRouteGuide_RecordRouteServer_SendAndClose_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendAndClose", params, verifier.timeout)
	return &MockRouteGuide_RecordRouteServer_SendAndClose_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RecordRouteServer_SendAndClose_OngoingVerification struct {
	mock              *MockRouteGuide_RecordRouteServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RecordRouteServer_SendAndClose_OngoingVerification) GetCapturedArguments() *RouteSummary {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_RecordRouteServer_SendAndClose_OngoingVerification) GetAllCapturedArguments() (_param0 []*RouteSummary) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*RouteSummary, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*RouteSummary)
		}
	}
	return
}

type MockRouteGuide_RouteChatClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockRouteGuide_RouteChatClient(options ...pegomock.Option) *MockRouteGuide_RouteChatClient {
	mock := &MockRouteGuide_RouteChatClient{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockRouteGuide_RouteChatClient) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockRouteGuide_RouteChatClient) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockRouteGuide_RouteChatClient) Header() (metadata.MD, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Header", params, []reflect.Type{reflect.TypeOf((*metadata.MD)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 metadata.MD
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(metadata.MD)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuide_RouteChatClient) Trailer() metadata.MD {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Trailer", params, []reflect.Type{reflect.TypeOf((*metadata.MD)(nil)).Elem()})
	var ret0 metadata.MD
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(metadata.MD)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatClient) CloseSend() error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CloseSend", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatClient) Context() context.Context {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Context", params, []reflect.Type{reflect.TypeOf((*context.Context)(nil)).Elem()})
	var ret0 context.Context
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(context.Context)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatClient) SendMsg(msg interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatClient().")
	}
	params := []pegomock.Param{msg}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SendMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatClient) RecvMsg(msg interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatClient().")
	}
	params := []pegomock.Param{msg}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RecvMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatClient) Send(m *RouteNote) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatClient().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Send", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatClient) Recv() (*RouteNote, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatClient().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Recv", params, []reflect.Type{reflect.TypeOf((**RouteNote)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *RouteNote
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*RouteNote)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuide_RouteChatClient) VerifyWasCalledOnce() *VerifierMockRouteGuide_RouteChatClient {
	return &VerifierMockRouteGuide_RouteChatClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockRouteGuide_RouteChatClient) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockRouteGuide_RouteChatClient {
	return &VerifierMockRouteGuide_RouteChatClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockRouteGuide_RouteChatClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockRouteGuide_RouteChatClient {
	return &VerifierMockRouteGuide_RouteChatClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockRouteGuide_RouteChatClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockRouteGuide_RouteChatClient {
	return &VerifierMockRouteGuide_RouteChatClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockRouteGuide_RouteChatClient struct {
	mock                   *MockRouteGuide_RouteChatClient
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockRouteGuide_RouteChatClient) Header() *MockRouteGuide_RouteChatClient_Header_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Header", params, verifier.timeout)
	return &MockRouteGuide_RouteChatClient_Header_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatClient_Header_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatClient_Header_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RouteChatClient_Header_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RouteChatClient) Trailer() *MockRouteGuide_RouteChatClient_Trailer_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Trailer", params, verifier.timeout)
	return &MockRouteGuide_RouteChatClient_Trailer_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatClient_Trailer_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatClient_Trailer_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RouteChatClient_Trailer_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RouteChatClient) CloseSend() *MockRouteGuide_RouteChatClient_CloseSend_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CloseSend", params, verifier.timeout)
	return &MockRouteGuide_RouteChatClient_CloseSend_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatClient_CloseSend_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatClient_CloseSend_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RouteChatClient_CloseSend_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RouteChatClient) Context() *MockRouteGuide_RouteChatClient_Context_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Context", params, verifier.timeout)
	return &MockRouteGuide_RouteChatClient_Context_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatClient_Context_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatClient_Context_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RouteChatClient_Context_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RouteChatClient) SendMsg(msg interface{}) *MockRouteGuide_RouteChatClient_SendMsg_OngoingVerification {
	params := []pegomock.Param{msg}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendMsg", params, verifier.timeout)
	return &MockRouteGuide_RouteChatClient_SendMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatClient_SendMsg_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatClient_SendMsg_OngoingVerification) GetCapturedArguments() interface{} {
	msg := c.GetAllCapturedArguments()
	return msg[len(msg)-1]
}

func (c *MockRouteGuide_RouteChatClient_SendMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RouteChatClient) RecvMsg(msg interface{}) *MockRouteGuide_RouteChatClient_RecvMsg_OngoingVerification {
	params := []pegomock.Param{msg}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RecvMsg", params, verifier.timeout)
	return &MockRouteGuide_RouteChatClient_RecvMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatClient_RecvMsg_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatClient_RecvMsg_OngoingVerification) GetCapturedArguments() interface{} {
	msg := c.GetAllCapturedArguments()
	return msg[len(msg)-1]
}

func (c *MockRouteGuide_RouteChatClient_RecvMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RouteChatClient) Send(m *RouteNote) *MockRouteGuide_RouteChatClient_Send_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Send", params, verifier.timeout)
	return &MockRouteGuide_RouteChatClient_Send_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatClient_Send_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatClient_Send_OngoingVerification) GetCapturedArguments() *RouteNote {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_RouteChatClient_Send_OngoingVerification) GetAllCapturedArguments() (_param0 []*RouteNote) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*RouteNote, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*RouteNote)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RouteChatClient) Recv() *MockRouteGuide_RouteChatClient_Recv_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Recv", params, verifier.timeout)
	return &MockRouteGuide_RouteChatClient_Recv_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatClient_Recv_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatClient_Recv_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RouteChatClient_Recv_OngoingVerification) GetAllCapturedArguments() {
}

type MockRouteGuide_RouteChatServer struct {
	fail func(message string, callerSkip ...int)
}

func NewMockRouteGuide_RouteChatServer(options ...pegomock.Option) *MockRouteGuide_RouteChatServer {
	mock := &MockRouteGuide_RouteChatServer{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockRouteGuide_RouteChatServer) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockRouteGuide_RouteChatServer) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockRouteGuide_RouteChatServer) SetHeader(md metadata.MD) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatServer().")
	}
	params := []pegomock.Param{md}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SetHeader", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatServer) SendHeader(md metadata.MD) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatServer().")
	}
	params := []pegomock.Param{md}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SendHeader", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatServer) SetTrailer(md metadata.MD) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatServer().")
	}
	params := []pegomock.Param{md}
	pegomock.GetGenericMockFrom(mock).Invoke("SetTrailer", params, []reflect.Type{})
}

func (mock *MockRouteGuide_RouteChatServer) Context() context.Context {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatServer().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Context", params, []reflect.Type{reflect.TypeOf((*context.Context)(nil)).Elem()})
	var ret0 context.Context
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(context.Context)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatServer) SendMsg(m interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatServer().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SendMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatServer) RecvMsg(m interface{}) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatServer().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RecvMsg", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatServer) Recv() (*RouteNote, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatServer().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Recv", params, []reflect.Type{reflect.TypeOf((**RouteNote)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *RouteNote
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*RouteNote)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRouteGuide_RouteChatServer) Send(m *RouteNote) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRouteGuide_RouteChatServer().")
	}
	params := []pegomock.Param{m}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Send", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRouteGuide_RouteChatServer) VerifyWasCalledOnce() *VerifierMockRouteGuide_RouteChatServer {
	return &VerifierMockRouteGuide_RouteChatServer{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockRouteGuide_RouteChatServer) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockRouteGuide_RouteChatServer {
	return &VerifierMockRouteGuide_RouteChatServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockRouteGuide_RouteChatServer) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockRouteGuide_RouteChatServer {
	return &VerifierMockRouteGuide_RouteChatServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockRouteGuide_RouteChatServer) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockRouteGuide_RouteChatServer {
	return &VerifierMockRouteGuide_RouteChatServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockRouteGuide_RouteChatServer struct {
	mock                   *MockRouteGuide_RouteChatServer
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockRouteGuide_RouteChatServer) SetHeader(md metadata.MD) *MockRouteGuide_RouteChatServer_SetHeader_OngoingVerification {
	params := []pegomock.Param{md}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetHeader", params, verifier.timeout)
	return &MockRouteGuide_RouteChatServer_SetHeader_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatServer_SetHeader_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatServer_SetHeader_OngoingVerification) GetCapturedArguments() metadata.MD {
	md := c.GetAllCapturedArguments()
	return md[len(md)-1]
}

func (c *MockRouteGuide_RouteChatServer_SetHeader_OngoingVerification) GetAllCapturedArguments() (_param0 []metadata.MD) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]metadata.MD, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(metadata.MD)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RouteChatServer) SendHeader(md metadata.MD) *MockRouteGuide_RouteChatServer_SendHeader_OngoingVerification {
	params := []pegomock.Param{md}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendHeader", params, verifier.timeout)
	return &MockRouteGuide_RouteChatServer_SendHeader_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatServer_SendHeader_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatServer_SendHeader_OngoingVerification) GetCapturedArguments() metadata.MD {
	md := c.GetAllCapturedArguments()
	return md[len(md)-1]
}

func (c *MockRouteGuide_RouteChatServer_SendHeader_OngoingVerification) GetAllCapturedArguments() (_param0 []metadata.MD) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]metadata.MD, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(metadata.MD)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RouteChatServer) SetTrailer(md metadata.MD) *MockRouteGuide_RouteChatServer_SetTrailer_OngoingVerification {
	params := []pegomock.Param{md}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetTrailer", params, verifier.timeout)
	return &MockRouteGuide_RouteChatServer_SetTrailer_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatServer_SetTrailer_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatServer_SetTrailer_OngoingVerification) GetCapturedArguments() metadata.MD {
	md := c.GetAllCapturedArguments()
	return md[len(md)-1]
}

func (c *MockRouteGuide_RouteChatServer_SetTrailer_OngoingVerification) GetAllCapturedArguments() (_param0 []metadata.MD) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]metadata.MD, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(metadata.MD)
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RouteChatServer) Context() *MockRouteGuide_RouteChatServer_Context_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Context", params, verifier.timeout)
	return &MockRouteGuide_RouteChatServer_Context_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatServer_Context_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatServer_Context_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RouteChatServer_Context_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RouteChatServer) SendMsg(m interface{}) *MockRouteGuide_RouteChatServer_SendMsg_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendMsg", params, verifier.timeout)
	return &MockRouteGuide_RouteChatServer_SendMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatServer_SendMsg_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatServer_SendMsg_OngoingVerification) GetCapturedArguments() interface{} {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_RouteChatServer_SendMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RouteChatServer) RecvMsg(m interface{}) *MockRouteGuide_RouteChatServer_RecvMsg_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RecvMsg", params, verifier.timeout)
	return &MockRouteGuide_RouteChatServer_RecvMsg_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatServer_RecvMsg_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatServer_RecvMsg_OngoingVerification) GetCapturedArguments() interface{} {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_RouteChatServer_RecvMsg_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockRouteGuide_RouteChatServer) Recv() *MockRouteGuide_RouteChatServer_Recv_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Recv", params, verifier.timeout)
	return &MockRouteGuide_RouteChatServer_Recv_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatServer_Recv_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatServer_Recv_OngoingVerification) GetCapturedArguments() {
}

func (c *MockRouteGuide_RouteChatServer_Recv_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockRouteGuide_RouteChatServer) Send(m *RouteNote) *MockRouteGuide_RouteChatServer_Send_OngoingVerification {
	params := []pegomock.Param{m}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Send", params, verifier.timeout)
	return &MockRouteGuide_RouteChatServer_Send_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRouteGuide_RouteChatServer_Send_OngoingVerification struct {
	mock              *MockRouteGuide_RouteChatServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRouteGuide_RouteChatServer_Send_OngoingVerification) GetCapturedArguments() *RouteNote {
	m := c.GetAllCapturedArguments()
	return m[len(m)-1]
}

func (c *MockRouteGuide_RouteChatServer_Send_OngoingVerification) GetAllCapturedArguments() (_param0 []*RouteNote) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*RouteNote, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(*RouteNote)
		}
	}
	return
}

func AnyPtrToRouteguidePoint() *Point {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(*Point))(nil)).Elem()))
	var nullValue *Point
	return nullValue
}

func EqPtrToRouteguidePoint(value *Point) *Point {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue *Point
	return nullValue
}

func NotEqPtrToRouteguidePoint(value *Point) *Point {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue *Point
	return nullValue
}

func PtrToRouteguidePointThat(matcher pegomock.ArgumentMatcher) *Point {
	pegomock.RegisterMatcher(matcher)
	var nullValue *Point
	return nullValue
}

func AnyPtrToRouteguideRouteSummary() *RouteSummary {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(*RouteSummary))(nil)).Elem()))
	var nullValue *RouteSummary
	return nullValue
}

func EqPtrToRouteguideRouteSummary(value *RouteSummary) *RouteSummary {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue *RouteSummary
	return nullValue
}

func NotEqPtrToRouteguideRouteSummary(value *RouteSummary) *RouteSummary {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue *RouteSummary
	return nullValue
}

func PtrToRouteguideRouteSummaryThat(matcher pegomock.ArgumentMatcher) *RouteSummary {
	pegomock.RegisterMatcher(matcher)
	var nullValue *RouteSummary
	return nullValue
}

func AnyPtrToRouteguideFeature() *Feature {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(*Feature))(nil)).Elem()))
	var nullValue *Feature
	return nullValue
}

func EqPtrToRouteguideFeature(value *Feature) *Feature {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue *Feature
	return nullValue
}

func NotEqPtrToRouteguideFeature(value *Feature) *Feature {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue *Feature
	return nullValue
}

func PtrToRouteguideFeatureThat(matcher pegomock.ArgumentMatcher) *Feature {
	pegomock.RegisterMatcher(matcher)
	var nullValue *Feature
	return nullValue
}

func AnyRouteguideRouteGuideListFeaturesClient() RouteGuide_ListFeaturesClient {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(RouteGuide_ListFeaturesClient))(nil)).Elem()))
	var nullValue RouteGuide_ListFeaturesClient
	return nullValue
}

func EqRouteguideRouteGuideListFeaturesClient(value RouteGuide_ListFeaturesClient) RouteGuide_ListFeaturesClient {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue RouteGuide_ListFeaturesClient
	return nullValue
}

func NotEqRouteguideRouteGuideListFeaturesClient(value RouteGuide_ListFeaturesClient) RouteGuide_ListFeaturesClient {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue RouteGuide_ListFeaturesClient
	return nullValue
}

func RouteguideRouteGuideListFeaturesClientThat(matcher pegomock.ArgumentMatcher) RouteGuide_ListFeaturesClient {
	pegomock.RegisterMatcher(matcher)
	var nullValue RouteGuide_ListFeaturesClient
	return nullValue
}

func AnyPtrToRouteguideRectangle() *Rectangle {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(*Rectangle))(nil)).Elem()))
	var nullValue *Rectangle
	return nullValue
}

func EqPtrToRouteguideRectangle(value *Rectangle) *Rectangle {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue *Rectangle
	return nullValue
}

func NotEqPtrToRouteguideRectangle(value *Rectangle) *Rectangle {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue *Rectangle
	return nullValue
}

func PtrToRouteguideRectangleThat(matcher pegomock.ArgumentMatcher) *Rectangle {
	pegomock.RegisterMatcher(matcher)
	var nullValue *Rectangle
	return nullValue
}

func AnyRouteguideRouteGuideRouteChatServer() RouteGuide_RouteChatServer {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(RouteGuide_RouteChatServer))(nil)).Elem()))
	var nullValue RouteGuide_RouteChatServer
	return nullValue
}

func EqRouteguideRouteGuideRouteChatServer(value RouteGuide_RouteChatServer) RouteGuide_RouteChatServer {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue RouteGuide_RouteChatServer
	return nullValue
}

func NotEqRouteguideRouteGuideRouteChatServer(value RouteGuide_RouteChatServer) RouteGuide_RouteChatServer {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue RouteGuide_RouteChatServer
	return nullValue
}

func RouteguideRouteGuideRouteChatServerThat(matcher pegomock.ArgumentMatcher) RouteGuide_RouteChatServer {
	pegomock.RegisterMatcher(matcher)
	var nullValue RouteGuide_RouteChatServer
	return nullValue
}

func AnyMetadataMD() metadata.MD {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(metadata.MD))(nil)).Elem()))
	var nullValue metadata.MD
	return nullValue
}

func EqMetadataMD(value metadata.MD) metadata.MD {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue metadata.MD
	return nullValue
}

func NotEqMetadataMD(value metadata.MD) metadata.MD {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue metadata.MD
	return nullValue
}

func MetadataMDThat(matcher pegomock.ArgumentMatcher) metadata.MD {
	pegomock.RegisterMatcher(matcher)
	var nullValue metadata.MD
	return nullValue
}

func AnyRouteguideRouteGuideRecordRouteServer() RouteGuide_RecordRouteServer {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(RouteGuide_RecordRouteServer))(nil)).Elem()))
	var nullValue RouteGuide_RecordRouteServer
	return nullValue
}

func EqRouteguideRouteGuideRecordRouteServer(value RouteGuide_RecordRouteServer) RouteGuide_RecordRouteServer {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue RouteGuide_RecordRouteServer
	return nullValue
}

func NotEqRouteguideRouteGuideRecordRouteServer(value RouteGuide_RecordRouteServer) RouteGuide_RecordRouteServer {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue RouteGuide_RecordRouteServer
	return nullValue
}

func RouteguideRouteGuideRecordRouteServerThat(matcher pegomock.ArgumentMatcher) RouteGuide_RecordRouteServer {
	pegomock.RegisterMatcher(matcher)
	var nullValue RouteGuide_RecordRouteServer
	return nullValue
}

func AnyRouteguideRouteGuideRecordRouteClient() RouteGuide_RecordRouteClient {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(RouteGuide_RecordRouteClient))(nil)).Elem()))
	var nullValue RouteGuide_RecordRouteClient
	return nullValue
}

func EqRouteguideRouteGuideRecordRouteClient(value RouteGuide_RecordRouteClient) RouteGuide_RecordRouteClient {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue RouteGuide_RecordRouteClient
	return nullValue
}

func NotEqRouteguideRouteGuideRecordRouteClient(value RouteGuide_RecordRouteClient) RouteGuide_RecordRouteClient {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue RouteGuide_RecordRouteClient
	return nullValue
}

func RouteguideRouteGuideRecordRouteClientThat(matcher pegomock.ArgumentMatcher) RouteGuide_RecordRouteClient {
	pegomock.RegisterMatcher(matcher)
	var nullValue RouteGuide_RecordRouteClient
	return nullValue
}

func AnyRouteguideRouteGuideListFeaturesServer() RouteGuide_ListFeaturesServer {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(RouteGuide_ListFeaturesServer))(nil)).Elem()))
	var nullValue RouteGuide_ListFeaturesServer
	return nullValue
}

func EqRouteguideRouteGuideListFeaturesServer(value RouteGuide_ListFeaturesServer) RouteGuide_ListFeaturesServer {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue RouteGuide_ListFeaturesServer
	return nullValue
}

func NotEqRouteguideRouteGuideListFeaturesServer(value RouteGuide_ListFeaturesServer) RouteGuide_ListFeaturesServer {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue RouteGuide_ListFeaturesServer
	return nullValue
}

func RouteguideRouteGuideListFeaturesServerThat(matcher pegomock.ArgumentMatcher) RouteGuide_ListFeaturesServer {
	pegomock.RegisterMatcher(matcher)
	var nullValue RouteGuide_ListFeaturesServer
	return nullValue
}

func AnyRouteguideRouteGuideRouteChatClient() RouteGuide_RouteChatClient {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(RouteGuide_RouteChatClient))(nil)).Elem()))
	var nullValue RouteGuide_RouteChatClient
	return nullValue
}

func EqRouteguideRouteGuideRouteChatClient(value RouteGuide_RouteChatClient) RouteGuide_RouteChatClient {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue RouteGuide_RouteChatClient
	return nullValue
}

func NotEqRouteguideRouteGuideRouteChatClient(value RouteGuide_RouteChatClient) RouteGuide_RouteChatClient {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue RouteGuide_RouteChatClient
	return nullValue
}

func RouteguideRouteGuideRouteChatClientThat(matcher pegomock.ArgumentMatcher) RouteGuide_RouteChatClient {
	pegomock.RegisterMatcher(matcher)
	var nullValue RouteGuide_RouteChatClient
	return nullValue
}

func AnyPtrToRouteguideRouteNote() *RouteNote {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(*RouteNote))(nil)).Elem()))
	var nullValue *RouteNote
	return nullValue
}

func EqPtrToRouteguideRouteNote(value *RouteNote) *RouteNote {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue *RouteNote
	return nullValue
}

func NotEqPtrToRouteguideRouteNote(value *RouteNote) *RouteNote {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue *RouteNote
	return nullValue
}

func PtrToRouteguideRouteNoteThat(matcher pegomock.ArgumentMatcher) *RouteNote {
	pegomock.RegisterMatcher(matcher)
	var nullValue *RouteNote
	return nullValue
}
