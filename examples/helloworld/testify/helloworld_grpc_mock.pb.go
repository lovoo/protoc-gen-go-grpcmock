// Code generated by protoc-gen-go-grpcmock. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpcmock v1.3.0
// - protoc                 v4.25.1
// - testify                v1.8.4
// source: helloworld.proto

package helloworld

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
)

func AnyHelloRequest() mock.AnythingOfTypeArgument {
	return mock.AnythingOfType("*helloworld.HelloRequest")
}

func AnyHelloReply() mock.AnythingOfTypeArgument {
	return mock.AnythingOfType("*helloworld.HelloReply")
}

type MockGreeterClient struct {
	mock.Mock
}

func NewMockGreeterClient() *MockGreeterClient {
	return &MockGreeterClient{}
}

func (c *MockGreeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	opts0 := []interface{}{ctx, in}
	for _, opts1 := range opts {
		opts0 = append(opts0, opts1)
	}
	args := c.Called(opts0...)
	return args.Get(0).(*HelloReply), args.Error(1)
}

func (c *MockGreeterClient) OnSayHello(ctx interface{}, in interface{}, opts ...interface{}) *mock.Call {
	return c.On("SayHello", append([]interface{}{ctx, in}, opts...)...)
}

type MockGreeterServer struct {
	mock.Mock
}

func NewMockGreeterServer() *MockGreeterServer {
	return &MockGreeterServer{}
}

func (s *MockGreeterServer) SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error) {
	args := s.Called(ctx, in)
	return args.Get(0).(*HelloReply), args.Error(1)
}

func (s *MockGreeterServer) OnSayHello(ctx interface{}, in interface{}) *mock.Call {
	return s.On("SayHello", ctx, in)
}
