// Code generated by protoc-gen-go-grpcmock. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpcmock v1.0.0
// - protoc                 v3.21.1
// - pegomock               v2.9.0+incompatible
// source: helloworld.proto

package helloworld

import (
	context "context"
	pegomock "github.com/petergtz/pegomock"
	grpc "google.golang.org/grpc"
	"reflect"
	"time"
)

type MockGreeterClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockGreeterClient(options ...pegomock.Option) *MockGreeterClient {
	mock := &MockGreeterClient{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockGreeterClient) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockGreeterClient) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockGreeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockGreeterClient().")
	}
	params := []pegomock.Param{ctx, in}
	for _, param := range opts {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SayHello", params, []reflect.Type{reflect.TypeOf((**HelloReply)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *HelloReply
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*HelloReply)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockGreeterClient) VerifyWasCalledOnce() *VerifierMockGreeterClient {
	return &VerifierMockGreeterClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockGreeterClient) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockGreeterClient {
	return &VerifierMockGreeterClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockGreeterClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockGreeterClient {
	return &VerifierMockGreeterClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockGreeterClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockGreeterClient {
	return &VerifierMockGreeterClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockGreeterClient struct {
	mock                   *MockGreeterClient
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockGreeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) *MockGreeterClient_SayHello_OngoingVerification {
	params := []pegomock.Param{ctx, in}
	for _, param := range opts {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SayHello", params, verifier.timeout)
	return &MockGreeterClient_SayHello_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockGreeterClient_SayHello_OngoingVerification struct {
	mock              *MockGreeterClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockGreeterClient_SayHello_OngoingVerification) GetCapturedArguments() (context.Context, *HelloRequest, []grpc.CallOption) {
	ctx, in, opts := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], in[len(in)-1], opts[len(opts)-1]
}

func (c *MockGreeterClient_SayHello_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*HelloRequest, _param2 [][]grpc.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*HelloRequest, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(*HelloRequest)
		}
		_param2 = make([][]grpc.CallOption, len(c.methodInvocations))
		for u := 0; u < len(c.methodInvocations); u++ {
			_param2[u] = make([]grpc.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(grpc.CallOption)
				}
			}
		}
	}
	return
}

type MockGreeterServer struct {
	fail func(message string, callerSkip ...int)
}

func NewMockGreeterServer(options ...pegomock.Option) *MockGreeterServer {
	mock := &MockGreeterServer{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockGreeterServer) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockGreeterServer) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockGreeterServer) SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockGreeterServer().")
	}
	params := []pegomock.Param{ctx, in}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SayHello", params, []reflect.Type{reflect.TypeOf((**HelloReply)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *HelloReply
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*HelloReply)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockGreeterServer) VerifyWasCalledOnce() *VerifierMockGreeterServer {
	return &VerifierMockGreeterServer{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockGreeterServer) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockGreeterServer {
	return &VerifierMockGreeterServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockGreeterServer) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockGreeterServer {
	return &VerifierMockGreeterServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockGreeterServer) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockGreeterServer {
	return &VerifierMockGreeterServer{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockGreeterServer struct {
	mock                   *MockGreeterServer
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockGreeterServer) SayHello(ctx context.Context, in *HelloRequest) *MockGreeterServer_SayHello_OngoingVerification {
	params := []pegomock.Param{ctx, in}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SayHello", params, verifier.timeout)
	return &MockGreeterServer_SayHello_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockGreeterServer_SayHello_OngoingVerification struct {
	mock              *MockGreeterServer
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockGreeterServer_SayHello_OngoingVerification) GetCapturedArguments() (context.Context, *HelloRequest) {
	ctx, in := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], in[len(in)-1]
}

func (c *MockGreeterServer_SayHello_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*HelloRequest) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*HelloRequest, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(*HelloRequest)
		}
	}
	return
}

func AnyPtrToHelloworldHelloRequest() *HelloRequest {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(*HelloRequest))(nil)).Elem()))
	var nullValue *HelloRequest
	return nullValue
}

func EqPtrToHelloworldHelloRequest(value *HelloRequest) *HelloRequest {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue *HelloRequest
	return nullValue
}

func NotEqPtrToHelloworldHelloRequest(value *HelloRequest) *HelloRequest {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue *HelloRequest
	return nullValue
}

func PtrToHelloworldHelloRequestThat(matcher pegomock.ArgumentMatcher) *HelloRequest {
	pegomock.RegisterMatcher(matcher)
	var nullValue *HelloRequest
	return nullValue
}

func AnyPtrToHelloworldHelloReply() *HelloReply {
	pegomock.RegisterMatcher(pegomock.NewAnyMatcher(reflect.TypeOf((*(*HelloReply))(nil)).Elem()))
	var nullValue *HelloReply
	return nullValue
}

func EqPtrToHelloworldHelloReply(value *HelloReply) *HelloReply {
	pegomock.RegisterMatcher(&pegomock.EqMatcher{Value: value})
	var nullValue *HelloReply
	return nullValue
}

func NotEqPtrToHelloworldHelloReply(value *HelloReply) *HelloReply {
	pegomock.RegisterMatcher(&pegomock.NotEqMatcher{Value: value})
	var nullValue *HelloReply
	return nullValue
}

func PtrToHelloworldHelloReplyThat(matcher pegomock.ArgumentMatcher) *HelloReply {
	pegomock.RegisterMatcher(matcher)
	var nullValue *HelloReply
	return nullValue
}
