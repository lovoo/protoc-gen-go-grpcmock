package generator

import (
	"fmt"
	"runtime/debug"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"

	"github.com/lovoo/protoc-gen-go-grpcmock/internal/protoc"
)

const FilenameSuffix = "_grpc_mock.pb.go"

// Mocker implements the mock interface for .proto file.
type Mocker interface {
	Name() string
	Mock(g *protogen.GeneratedFile, file *protogen.File)
}

func GenerateFile(version string, gen *protogen.Plugin, file *protogen.File, mocker Mocker) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + FilenameSuffix
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpcmock. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - ", fmt.Sprintf("%-23s", "protoc-gen-go-grpcmock"), version)
	g.P("// - ", fmt.Sprintf("%-23s", "protoc"), protoc.Version(gen))
	if mod := module(mocker.Name()); mod != nil {
		g.P("// - ", fmt.Sprintf("%-23s", mocker.Name()), mod.Version)
	} else {
		g.P("// - ", fmt.Sprintf("%-23s", mocker.Name()), "unknown")
	}
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	mocker.Mock(g, file)

	return g
}

func module(name string) *debug.Module {
	if bi, ok := debug.ReadBuildInfo(); ok {
		for _, dep := range bi.Deps {
			if strings.Contains(dep.Path, name) {
				return dep
			}
		}
	}

	return nil
}
